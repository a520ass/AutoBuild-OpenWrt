name: Build_Phicomm_N1

on: 
  repository_dispatch:
  workflow_dispatch:
    inputs:
      log_switch:
        description: "Compile log switch"
        required: false
        default: "false"
        type: boolean
        options:
          - true
          - false
  
env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  CONFIG_FILE: 'config/Phicomm_N1.config'
  REPO_BRANCH: master
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Initialize environment
      id: init
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -y update
        sudo -E apt-get -y install $(curl -fsSL https://raw.githubusercontent.com/LeeHe-gif/depend_ubuntu2204_openwrt/main/depend_ubuntu2204_openwrt)
        sudo timedatectl set-timezone "${TZ}"
        echo "status=success" >> ${GITHUB_OUTPUT}
        
    - name: Clone source code
      id: clone
      if: ${{ steps.init.outputs.status }} == 'success' && !cancelled()
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        git clone --depth 1 https://github.com/vernesong/OpenClash.git OpenClash

    - name: Setup disk space
      run: |
        sudo mkdir -p -m 777 /mnt/openwrt/{dl,staging_dir,build_dir}
        sudo chown -R $USER:$GROUPS /mnt/openwrt
        ln -sfn /mnt/openwrt/dl openwrt/dl
        ln -sfn /mnt/openwrt/staging_dir openwrt/staging_dir
        ln -sfn /mnt/openwrt/build_dir openwrt/build_dir
        
    - name: Update feeds
      working-directory: ./openwrt
      run: |        
        ./scripts/feeds update -a
        rm -rf feeds/luci/applications/luci-app-openclash
        cp -r ../OpenClash/luci-app-openclash feeds/luci/applications/
        ./scripts/feeds install -a

    - name: Configuration Customization
      run: |
        if [[ ! -f "${CONFIG_FILE}" ]]; then
          echo "❌ Error: Config file ${CONFIG_FILE} not found!"
          exit 1
        fi
        # chmod +x ./customize.sh && ./customize.sh
        [[ -d "files" ]] && mv -f files openwrt/files
        cp -fv "${CONFIG_FILE}" openwrt/.config
        
    - name: Download packages
      working-directory: ./openwrt
      run: |
        make download -j$(nproc) || { echo "❌ Download failed"; exit 1; }
        find dl -size -1024c -delete

    - name: Compile firmware
      id: compile
      working-directory: ./openwrt
      run: |
        if [[ "${{ inputs.log_switch }}" == "true" ]]; then
            make -j1 V=s
        else
            make -j$(nproc)
        fi
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && steps.compile.outputs.status == 'success'
      run: |
        cd openwrt/bin/targets/*/* || { echo "❌ Firmware directory missing"; exit 1; }
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload artifacts
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}/*

    - name: Generate release info
      id: release
      if: env.UPLOAD_RELEASE == 'true' && steps.organize.outputs.status == 'success'
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        cat <<EOF > release.txt
        🚀 LEDE Firmware for Phicomm N1
        ------------------------------------
        Build Date: $(date +"%Y-%m-%d %H:%M")
        Source: $REPO_URL
        Branch: $REPO_BRANCH
        Kernel: $(grep 'LINUX_VERSION-' openwrt/.config | cut -d= -f2)
        EOF
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.release.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.release.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Cleanup workflows
      uses: LeeHe-gif/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3
        token: ${{ secrets.GITHUB_TOKEN }}
